name: CI - Standards Compliance & Quality Gates

on:
  workflow_dispatch:
  push:
    branches: [main, master, develop, "feature/**", "release/**"]
  pull_request:
    branches: [main, master, develop]
  schedule:
    - cron: "0 2 * * *" # Daily run

env:
  PYTHON_VERSION: "3.11"
  CMAKE_BUILD_TYPE: "Debug"
  MIN_TEST_COVERAGE: 70 # Adjust when coverage tooling added
  MIN_REQ_LINKAGE_COVERAGE: 80
  CXX_STANDARD: 17
  BUILD_DIR: build/ci

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  spec-validation:
    name: Spec Structure Validation (Schema & Traceability Prereq)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install spec validation deps
        run: pip install pyyaml jsonschema
      - name: Validate spec structure
        run: |
          python scripts/validate-spec-structure.py || {
            echo '❌ Spec structure validation failed.'; exit 1; }

  spec-generation:
    name: Spec Artifact Generation (Index, Trace JSON, Test Skeletons)
    needs: [spec-validation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Generate spec index
        run: python scripts/generators/spec_parser.py
      - name: Build traceability JSON
        run: python scripts/generators/build_trace_json.py
      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: spec-generated-artifacts
          path: |
            build/spec-index.json
            build/traceability.json

  # Phase 05: TDD - Test-Driven Development
  unit-tests:
    name: Unit Tests (XP - TDD Red-Green-Refactor)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install build toolchain
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake gcovr cppcheck clang-tidy
      - name: Configure (CMake)
        run: |
          cd 05-implementation
          cmake -B ${{ env.BUILD_DIR }} -S . -DCMAKE_BUILD_TYPE=${{ env.CMAKE_BUILD_TYPE }} -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD }} -DBUILD_TESTING=ON
      - name: Build
        run: |
          cd 05-implementation
          cmake --build ${{ env.BUILD_DIR }} --config ${{ env.CMAKE_BUILD_TYPE }} -- -j$(nproc)
      - name: Run Unit Tests (CTest)
        run: |
          cd 05-implementation/${{ env.BUILD_DIR }}
          ctest --output-on-failure || { echo '❌ Unit tests failed'; exit 1; }
      - name: Run Performance Tests (non-blocking)
        continue-on-error: true
        run: |
          cd 05-implementation
          if [ -f "${{ env.BUILD_DIR }}/performance_test" ]; then ./${{ env.BUILD_DIR }}/performance_test; else echo 'No performance_test binary'; fi
      - name: Collect Coverage (placeholder)
        run: |
          echo 'TODO: Add coverage instrumentation flags to CMake (gcov/llvm).'
      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: build-binaries
          path: 05-implementation/${{ env.BUILD_DIR }}

  coverage-build:
    name: C++ Coverage Build & Report (Scaffold)
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install build toolchain (with gcovr)
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake gcovr lcov
      - name: Configure (CMake, Coverage)
        run: |
          cd 05-implementation
          cmake -B build/coverage -S . -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_STANDARD=${{ env.CXX_STANDARD }} -DBUILD_TESTING=ON -DENABLE_COVERAGE=ON
      - name: Build (Coverage)
        run: |
          cd 05-implementation
          cmake --build build/coverage --config Debug -- -j$(nproc)
      - name: Run Unit Tests (Coverage)
        run: |
          cd 05-implementation/build/coverage
          ctest --output-on-failure || { echo '❌ Coverage unit tests failed'; exit 1; }
      - name: Generate Coverage Report (gcovr)
        run: |
          cd 05-implementation/build/coverage
          gcovr -r ../.. --xml-pretty -o coverage.xml --html --html-details -o coverage.html || echo 'Coverage report generation failed (scaffold)'
      - name: Upload Coverage Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            05-implementation/build/coverage/coverage.xml
            05-implementation/build/coverage/coverage.html
          if-no-files-found: ignore
      - name: Coverage Enforcement (placeholder)
        run: |
          echo 'TODO: Enforce minimum coverage threshold in future.'

  # Phase 05: Implementation Quality Checks
  code-quality:
    name: Code Quality & Standards (IEEE 1016, XP Practices)
    needs: [spec-generation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "20"
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install quality tools (YAML + Markdown)
        run: |
          pip install yamllint
          npm install -g markdownlint-cli2
      - name: Lint Markdown (advisory)
        run: |
          markdownlint-cli2 "**/*.md" || echo 'Markdown lint warnings (non-blocking)'
      - name: Lint YAML
        run: |
          find . -name '*.yml' -o -name '*.yaml' | xargs -r yamllint || echo 'YAML lint warnings (non-blocking)'
      - name: C++ Static Analysis (cppcheck)
        run: |
          sudo apt-get update && sudo apt-get install -y cppcheck
          cppcheck --enable=warning,performance,style --inline-suppr --error-exitcode=1 05-implementation/src || echo 'cppcheck warnings found'
      - name: clang-tidy (advisory)
        run: |
          echo 'NOTE: Integrate clang-tidy via CMake for full diagnostics in future.'

  traceability-coverage:
    name: Traceability Coverage Enforcement
    needs: [spec-generation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: actions/download-artifact@v4
        with:
          name: spec-generated-artifacts
          path: build
      - name: Enforce linkage coverage
        run: |
          if [ -f scripts/validate-trace-coverage.py ]; then \
            python scripts/validate-trace-coverage.py --min-req ${{ env.MIN_REQ_LINKAGE_COVERAGE }}; \
          else echo 'Trace coverage script missing (skipped)'; fi

  integrity-scan:
    name: Integrity Level Scan
    needs: [spec-generation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Run integrity scan
        run: |
          if [ -f scripts/integrity_level_scan.py ]; then python scripts/integrity_level_scan.py; else echo 'No integrity scan script'; fi
      - uses: actions/upload-artifact@v4
        with:
          name: integrity-scan
          path: build/integrity-scan.json
          if-no-files-found: ignore

  # Phase 02: Requirements Traceability Check
  requirements-traceability:
    name: Requirements Traceability (ISO/IEC/IEEE 29148)
    needs: [spec-validation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Generate matrix
        run: |
          python scripts/generate-traceability-matrix.py || echo 'Generation warnings'
      - name: Validate traceability
        run: |
          python scripts/validate-traceability.py || { echo '❌ Traceability validation failed'; exit 1; }
      - uses: actions/upload-artifact@v4
        with:
          name: traceability-matrix
          path: reports/traceability-matrix.md
          if-no-files-found: ignore

  # Phase 03: Architecture Compliance (ISO/IEC/IEEE 42010)
  architecture-validation:
    name: Architecture Compliance (ISO/IEC/IEEE 42010)
    needs: [spec-validation]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: ADR Impact Scan
        run: |
          if [ -f scripts/adr_impact_scan.py ]; then python scripts/adr_impact_scan.py --warn-only || true; fi
      - name: Validate ADR structure
        run: |
          missing=0; for adr in 03-architecture/decisions/ADR-*.md; do [ -f "$adr" ] || continue; \
            for sec in Status Context Decision Consequences; do \
              grep -q "## $sec" "$adr" || { echo "❌ Missing $sec in $adr"; missing=1; }; done; done; \
            [ $missing -eq 0 ] || { echo 'ADR structural issues'; exit 1; }
      - name: Validate quality scenarios
        run: |
          file=03-architecture/architecture-quality-scenarios.md; \
          [ -f "$file" ] || { echo '❌ Missing architecture-quality-scenarios.md'; exit 1; }; \
          for attr in Performance Availability Security; do \
            grep -qi "$attr" "$file" || { echo "❌ Missing scenario for $attr"; exit 1; }; done; \
          echo '✅ Quality attribute scenarios present'

  # Security Scanning
  security-scan:
    name: Security & Hygiene Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Secret scan (basic)
        run: |
          echo 'Scanning for obvious secrets...'
          grep -R "API_KEY" -n . || true
      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
      - name: Upload Trivy SARIF
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  # Phase 06: Integration Testing
  integration-tests:
    name: Integration Tests (XP - Continuous Integration)
    needs: [unit-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run integration test suite
        run: |
          echo 'No dedicated integration tests yet – placeholder succeeded.'

  # Deployment (Phase 08) - only on main branch
  deploy-staging:
    name: Deploy to Staging (Phase 08 - Transition)
    needs:
      [
        code-quality,
        unit-tests,
        integration-tests,
        acceptance-tests,
        security-scan,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Deploy to staging
        run: |
          echo 'No staging deployment implemented yet – placeholder succeeded.'

  # Phase 07: Verification & Validation (IEEE 1012)
  acceptance-tests:
    name: Acceptance Tests (XP - Customer Tests, IEEE 1012)
    needs: [integration-tests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run acceptance test suite
        run: |
          echo 'No acceptance (customer) tests implemented yet – placeholder succeeded.'

  # Standards Compliance Report
  compliance-report:
    name: Consolidated Standards Compliance Report
    if: always()
    needs:
      [
        spec-validation,
        code-quality,
        unit-tests,
        integration-tests,
        requirements-traceability,
        acceptance-tests,
        architecture-validation,
        security-scan,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Generate compliance report
        run: |
          cat > compliance-report.md <<'EOF'
          # Standards Compliance Report (Consolidated)

          Generated: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref_name }}

          ## Life Cycle (ISO/IEC/IEEE 12207)
          - Spec Validation: ${{ needs.spec-validation.result }}
          - Build & Test: ${{ needs.unit-tests.result }}
          - Architecture: ${{ needs.architecture-validation.result }}
          - Traceability: ${{ needs.requirements-traceability.result }}

          ## Quality Gates
          - Code Quality: ${{ needs.code-quality.result }}
          - Security Scan: ${{ needs.security-scan.result }}
          - Integrity Scan: ${{ needs.integrity-scan.result }}
          - Trace Coverage: ${{ needs.traceability-coverage.result }}

          ## Notes
          Coverage & advanced metrics to be integrated in subsequent iteration (placeholders present).
          EOF
          cat compliance-report.md
      - uses: actions/upload-artifact@v4
        with:
          name: compliance-report
          path: compliance-report.md
      - name: PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('compliance-report.md','utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
